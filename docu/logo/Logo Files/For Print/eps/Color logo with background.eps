%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2366 761
%%HiResBoundingBox: 0 0 2365.9199 760.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2365.9199 760.07996 re
W
q
[0.24 0 0 -0.24 0 760.07996] cm
q
0 0 9858.333 3166.2939 re
W*
q
[3.125199 0 0 3.12597 0.0394226 0] cm
0 0 3154.4402 1013.8996 re
f
Q
q
[25.339453 0 0 25.345701 241.36755 241.38763] cm
q
0 101 370 5 re
W
[369.999995 0 0 5 0.000000232456 101.000012] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.000002 def
/xMax 1 def
/yMax 0.999998 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
q
[24.481281 0 0 24.487318 -4717.1719 -4682] cm
q
260.16699 261.185 m
260.31699 261.33398 260.513 261.41 260.70798 261.41 c
260.90399 261.41 261.09998 261.33499 261.24799 261.185 c
268.67297 253.76199 l
268.97098 253.463 268.97098 252.98 268.67297 252.681 c
268.37396 252.383 267.88998 252.383 267.59299 252.681 c
260.16699 260.10501 l
259.87 260.40399 259.87 260.888 260.16699 261.185 c
h
W
[8.95224 0 0 8.952514 259.944251 252.457484] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.008294 def
/yMin -0.00832 def
/xMax 1.008321 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
-0.008294 1.008321 0 axialSH
Q
q
259.896 255.75999 m
260.04498 255.909 260.241 255.98399 260.43698 255.98399 c
260.63098 255.98399 260.827 255.90999 260.97498 255.75999 c
265.82397 250.91199 l
266.12299 250.61299 266.12299 250.12999 265.82397 249.83099 c
265.52698 249.53299 265.04297 249.53299 264.74496 249.83099 c
259.89597 254.67999 l
259.59799 254.979 259.59799 255.46201 259.896 255.75999 c
h
W
[6.375733 0 0 6.37651 259.672499 249.607493] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.011686 def
/yMin -0.011684 def
/xMax 1.011725 def
/yMax 0.999998 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc2_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc2_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc2_0 } {
0.5 sub 2 mul 0 add xpdfFunc2_1
} ifelse
}
def
-0.011686 1.011725 0 axialSH
Q
q
259.73401 250.989 m
259.92902 250.989 260.125 250.91499 260.27402 250.765 c
262.97501 248.064 l
263.27402 247.76599 263.27402 247.282 262.97501 246.98399 c
262.67599 246.68599 262.194 246.68599 261.89502 246.98399 c
259.19403 249.68599 l
258.89502 249.98399 258.89502 250.46799 259.19403 250.76599 c
259.34201 250.91499 259.53699 250.989 259.73401 250.989 c
h
W
[4.229492 0 0 4.2285 258.969787 246.760494] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.017678 def
/yMin -0.017619 def
/xMax 1.017671 def
/yMax 1.000001 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc3_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc3_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc3_0 } {
0.5 sub 2 mul 0 add xpdfFunc3_1
} ifelse
}
def
-0.017678 1.017671 0 axialSH
Q
q
270.58899 262.16 m
270.737 262.31 270.93298 262.38501 271.12698 262.38501 c
271.323 262.38501 271.51898 262.311 271.66797 262.16 c
274.36996 259.45901 l
274.66898 259.16 274.66898 258.67801 274.36996 258.37903 c
274.07095 258.08102 273.58698 258.08102 273.28897 258.37903 c
270.58896 261.08102 l
270.29001 261.37799 270.29001 261.862 270.58899 262.16 c
h
W
[4.229492 0 0 4.229492 270.364747 258.155512] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.017671 def
/yMin -0.017612 def
/xMax 1.017671 def
/yMax 1.000001 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc4_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc4_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc4_0 } {
0.5 sub 2 mul 0 add xpdfFunc4_1
} ifelse
}
def
-0.017671 1.017671 0 axialSH
Q
q
265.59299 261.45901 m
265.741 261.60703 265.93799 261.68301 266.133 261.68301 c
266.328 261.68301 266.52499 261.608 266.673 261.45901 c
271.522 256.61002 l
271.82101 256.31201 271.82101 255.82901 271.522 255.53001 c
271.22299 255.23201 270.73901 255.23201 270.44202 255.53001 c
265.59302 260.37903 l
265.29501 260.67599 265.29501 261.16 265.59299 261.45901 c
h
W
[6.37677 0 0 6.376496 265.369522 255.306518] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.011685 def
/yMin -0.011685 def
/xMax 1.011717 def
/yMax 0.999999 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc5_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc5_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc5_0 } {
0.5 sub 2 mul 0 add xpdfFunc5_1
} ifelse
}
def
-0.011685 1.011717 0 axialSH
Q
q
299.64499 238.48599 m
300.88898 237.241 300.88898 235.21599 299.64499 233.96999 c
287.383 221.70898 l
286.78 221.10599 285.978 220.77399 285.125 220.77399 c
285.07001 220.77399 285.01599 220.77899 284.961 220.78198 c
284.936 220.78198 284.909 220.78299 284.88501 220.78499 c
284.12201 220.842 283.41302 221.16299 282.867 221.70799 c
268.741 235.834 l
247.022 235.834 l
247.022 231.2 l
247.022 229.12599 245.334 227.439 243.261 227.439 c
215.177 227.439 l
214.258 227.439 213.371 227.77699 212.679 228.392 c
211.877 229.108 211.416 230.132 211.416 231.2 c
211.416 246.39999 l
211.416 248.47299 213.103 250.15999 215.17599 250.15999 c
217.71399 250.15999 l
217.71399 283.64999 l
216.09599 283.64999 l
214.46399 283.64999 213.13599 284.978 213.13599 286.61099 c
213.13599 288.26599 l
213.13599 289.89899 214.46399 291.22699 216.09599 291.22699 c
288.13098 291.22699 l
289.76398 291.22699 291.09198 289.89899 291.09198 288.26599 c
291.09198 286.61099 l
291.09198 284.978 289.76398 283.64999 288.13098 283.64999 c
286.51398 283.64999 l
286.51398 251.614 l
299.64499 238.48599 l
h
283.948 222.78999 m
283.95898 222.77899 283.97 222.769 283.983 222.758 c
281.35001 238.67599 l
265.43301 241.30899 l
265.44202 241.297 265.45203 241.286 265.46201 241.27499 c
283.948 222.78999 l
h
247.02299 237.36301 m
267.21399 237.36301 l
264.383 240.194 l
264.19501 240.383 264.03601 240.592 263.90298 240.81599 c
247.02298 240.81599 l
247.02298 237.36301 l
247.02299 237.36301 l
h
247.02299 246.39999 m
247.02299 242.34299 l
263.45499 242.34299 l
263.45297 242.37898 263.44897 242.41499 263.44897 242.45099 c
263.44897 243.30399 263.78198 244.10599 264.38397 244.70898 c
276.64496 256.96997 l
277.24896 257.57297 278.04996 257.90497 278.90295 257.90497 c
279.22894 257.90497 279.54895 257.85498 279.85095 257.76096 c
279.85095 278.67596 l
224.37994 278.67596 l
224.37994 250.16 l
230.46495 250.16 l
237.82495 256.92599 l
237.83896 256.93799 237.85396 256.94699 237.86896 256.95999 c
237.88795 256.97501 237.90695 256.991 237.92796 257.005 c
237.94997 257.01901 237.97397 257.03 237.99696 257.04199 c
238.01697 257.05298 238.03496 257.06299 238.05597 257.07098 c
238.08397 257.08298 238.11298 257.09 238.14098 257.09698 c
238.15997 257.103 238.17697 257.10797 238.19397 257.112 c
238.24097 257.12201 238.28897 257.12601 238.33698 257.12799 c
238.33798 257.12799 238.33897 257.12799 238.33998 257.12799 c
238.44598 257.12799 238.54797 257.10599 238.63898 257.06598 c
238.65198 257.05997 238.66397 257.05197 238.67697 257.04498 c
238.71097 257.02798 238.74297 257.01199 238.77296 256.991 c
238.78796 256.98001 238.79996 256.96899 238.81497 256.95599 c
238.84196 256.935 238.86797 256.914 238.89197 256.88998 c
238.89497 256.88498 238.89897 256.88397 238.90396 256.87997 c
238.91496 256.86597 238.92397 256.85098 238.93396 256.83899 c
238.95096 256.81799 238.96896 256.79498 238.98396 256.772 c
238.99696 256.75101 239.00797 256.73001 239.01897 256.70901 c
239.02997 256.68701 239.04196 256.664 239.05096 256.64102 c
239.06096 256.61801 239.06796 256.59201 239.07396 256.56802 c
239.07996 256.54501 239.08696 256.52203 239.09096 256.49902 c
239.09596 256.47101 239.09796 256.44403 239.09996 256.41501 c
239.09996 256.39902 239.10497 256.38202 239.10497 256.36502 c
239.10997 250.16002 l
243.26196 250.16002 l
245.33501 250.159 247.02299 248.472 247.02299 246.39999 c
h
223.61501 280.20401 m
280.61401 280.20401 l
281.03601 280.20401 281.37903 279.86102 281.37903 279.44 c
281.37903 256.75101 l
284.98703 253.14301 l
284.98703 283.651 l
261.57202 283.651 l
261.52002 283.651 261.46902 283.65601 261.42102 283.66602 c
261.40002 283.67001 261.38004 283.67801 261.36002 283.68402 c
261.33301 283.69202 261.30402 283.69904 261.27701 283.71002 c
261.25302 283.72101 261.229 283.73401 261.207 283.74603 c
261.186 283.75903 261.16602 283.76703 261.146 283.77902 c
261.14499 283.78003 261.14301 283.78201 261.142 283.78201 c
261.10001 283.81003 261.061 283.84201 261.02798 283.87701 c
258.22897 286.67502 l
245.99898 286.67502 l
243.19897 283.87503 l
243.16898 283.84503 243.13597 283.82004 243.10397 283.79703 c
243.09697 283.79303 243.09198 283.78604 243.08498 283.78201 c
243.05498 283.76102 243.02197 283.74503 242.98997 283.73001 c
242.97697 283.72302 242.96597 283.71402 242.95297 283.70901 c
242.91797 283.69501 242.88297 283.686 242.84798 283.67603 c
242.83498 283.67303 242.82298 283.66803 242.80998 283.66504 c
242.75998 283.65503 242.70898 283.65002 242.65799 283.65002 c
219.24199 283.65002 l
219.24199 250.16002 l
222.85098 250.16002 l
222.85098 279.44003 l
222.851 279.86099 223.192 280.20401 223.61501 280.20401 c
h
215.177 248.633 m
213.946 248.633 212.94501 247.631 212.94501 246.39999 c
212.94501 231.2 l
212.94501 230.567 213.21901 229.959 213.69601 229.53299 c
214.10701 229.16699 214.63301 228.967 215.17702 228.967 c
243.26102 228.967 l
244.49301 228.967 245.49402 229.968 245.49402 231.19899 c
245.49402 246.39899 l
245.49402 247.62898 244.49301 248.63098 243.26102 248.63098 c
238.34602 248.63098 l
237.92403 248.63098 237.58302 248.97198 237.58202 249.39398 c
237.57802 254.62299 l
231.27802 248.83099 l
231.26102 248.81499 231.24101 248.804 231.22302 248.78999 c
231.20702 248.778 231.19102 248.765 231.17502 248.754 c
231.14803 248.737 231.12102 248.72299 231.09302 248.70999 c
231.07602 248.702 231.06001 248.69299 231.04301 248.68599 c
231.01201 248.67499 230.98201 248.66499 230.95001 248.65799 c
230.93301 248.65399 230.91701 248.64799 230.90001 248.64499 c
230.86501 248.63799 230.83 248.63599 230.79501 248.63499 c
230.78302 248.63499 230.77202 248.631 230.76001 248.631 c
230.729 248.631 l
230.728 248.631 l
215.177 248.631 l
215.177 248.633 l
h
288.13101 285.177 m
288.92001 285.177 289.565 285.82101 289.565 286.61099 c
289.565 288.26599 l
289.565 289.05698 288.92001 289.69998 288.13101 289.69998 c
216.09601 289.69998 l
215.30602 289.69998 214.664 289.05698 214.664 288.26599 c
214.664 286.61099 l
214.664 285.82098 215.30701 285.177 216.09601 285.177 c
218.47101 285.177 l
218.47301 285.177 218.47601 285.177 218.47801 285.177 c
242.34302 285.177 l
245.14201 287.978 l
245.17702 288.013 245.21602 288.04401 245.25801 288.07401 c
245.27802 288.086 245.29901 288.095 245.31801 288.10501 c
245.34201 288.11902 245.36401 288.13202 245.39001 288.14301 c
245.41501 288.15399 245.44202 288.16 245.46802 288.16699 c
245.49002 288.17398 245.51003 288.18298 245.53201 288.18698 c
245.58202 288.19598 245.63202 288.202 245.68201 288.202 c
258.54501 288.202 l
258.595 288.202 258.64401 288.19598 258.694 288.18698 c
258.716 288.18298 258.737 288.17398 258.758 288.16699 c
258.78299 288.159 258.811 288.15298 258.83499 288.14301 c
258.85999 288.13202 258.883 288.11902 258.90601 288.10602 c
258.927 288.09503 258.94699 288.08502 258.96802 288.07401 c
259.00601 288.047 259.04303 288.017 259.07501 287.98502 c
259.078 287.98203 259.08102 287.98102 259.08401 287.97803 c
261.88303 285.17703 l
285.74802 285.17703 l
285.75101 285.17703 285.75201 285.17703 285.755 285.17703 c
288.13101 285.17703 l
288.13101 285.177 l
h
285.20999 250.758 m
285.20999 250.759 285.20999 250.759 285.20999 250.758 c
280.07898 255.888 l
279.76599 256.203 279.34698 256.37601 278.90097 256.37601 c
278.45697 256.37601 278.03897 256.20401 277.72397 255.888 c
265.46198 243.627 l
265.26196 243.427 265.11996 243.185 265.04196 242.92 c
282.13797 240.092 l
282.13998 240.092 282.14096 240.09099 282.14197 240.09099 c
282.18997 240.08299 282.23798 240.06999 282.28296 240.05299 c
282.29596 240.04799 282.30597 240.041 282.31897 240.03699 c
282.34998 240.02298 282.38098 240.00899 282.40897 239.99098 c
282.42596 239.98099 282.43997 239.96898 282.45697 239.95798 c
282.47797 239.94098 282.50198 239.92497 282.52197 239.90598 c
282.53699 239.89297 282.54898 239.87898 282.56296 239.86497 c
282.58197 239.84398 282.60095 239.82397 282.61795 239.80197 c
282.62994 239.78697 282.63995 239.77197 282.64996 239.75597 c
282.66498 239.73297 282.67996 239.70897 282.69196 239.68396 c
282.70197 239.66595 282.71097 239.64896 282.71796 239.62996 c
282.72797 239.60596 282.73596 239.58096 282.74295 239.55496 c
282.74896 239.53397 282.75595 239.51196 282.75995 239.49097 c
282.76196 239.48196 282.76596 239.47397 282.76694 239.46397 c
285.59494 222.36897 l
285.85995 222.44597 286.10095 222.58897 286.30194 222.78897 c
298.56293 235.04997 l
299.21191 235.69897 299.21191 236.75497 298.56293 237.40398 c
285.20999 250.758 l
h
W
[89.161976 0 0 70.453001 211.416006 220.773989] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1.003488 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc6_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc6_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc6_0 } {
0.5 sub 2 mul 0 add xpdfFunc6_1
} ifelse
}
def
-0 1.003488 0 axialSH
Q
q
239.646 262.51001 m
237.711 262.51001 236.136 264.08401 236.136 266.01901 c
236.136 267.95502 237.711 269.53 239.646 269.53 c
240.685 269.53 241.61699 269.073 242.25999 268.354 c
247.27499 271.15201 l
247.17999 271.47 247.12799 271.806 247.12799 272.15402 c
247.12799 274.09003 248.702 275.66403 250.63699 275.66403 c
252.573 275.66403 254.14699 274.09003 254.14699 272.15402 c
254.14699 270.21802 252.57298 268.64304 250.63699 268.64304 c
249.59799 268.64304 248.666 269.10004 248.02299 269.82004 c
243.009 267.02103 l
243.104 266.70404 243.157 266.36801 243.157 266.01901 c
243.157 265.67203 243.105 265.336 243.00999 265.01901 c
248.02499 262.21902 l
248.668 262.94003 249.599 263.39603 250.638 263.39603 c
252.573 263.39603 254.14799 261.82101 254.14799 259.88702 c
254.14799 257.95001 252.573 256.37701 250.638 256.37701 c
248.703 256.37701 247.129 257.95102 247.129 259.88702 c
247.129 260.23502 247.18199 260.57004 247.276 260.88803 c
242.26199 263.68604 l
241.617 262.966 240.685 262.51001 239.646 262.51001 c
h
239.646 268.00299 m
238.55299 268.00299 237.664 267.11298 237.664 266.01999 c
237.664 264.927 238.55301 264.03799 239.646 264.03799 c
240.73898 264.03799 241.62799 264.92801 241.62799 266.01999 c
241.62801 267.11301 240.739 268.00299 239.646 268.00299 c
h
248.901 271.19699 m
248.903 271.19498 248.905 271.19199 248.907 271.189 c
248.908 271.18799 248.908 271.18799 248.908 271.186 c
249.24701 270.582 249.895 270.17099 250.636 270.17099 c
251.73 270.17099 252.618 271.061 252.618 272.15298 c
252.618 273.24496 251.72899 274.13397 250.636 274.13397 c
249.543 274.13397 248.655 273.24496 248.655 272.15298 c
248.655 271.80701 248.744 271.48099 248.901 271.19699 c
h
250.636 257.905 m
251.729 257.905 252.618 258.793 252.618 259.88699 c
252.618 260.97998 251.728 261.867 250.636 261.867 c
249.54401 261.867 248.655 260.979 248.655 259.88699 c
248.655 258.793 249.543 257.905 250.636 257.905 c
h
W
[18.011993 0 0 19.287017 236.136009 256.377015] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 0.999999 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc7_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc7_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc7_0 } {
0.5 sub 2 mul 0 add xpdfFunc7_1
} ifelse
}
def
-0 0.999999 0 axialSH
Q
Q
q
[41.470371 0 0 41.480602 3075.0195 709.87006] cm
q
0.92 6.12 m
0.92 18.119999 l
0.92 18.48 1.1 18.66 1.46 18.66 c
1.83334 18.66 2.02 18.48 2.02 18.119999 c
2.02 6.119999 l
2.02 5.746659 1.83334 5.559999 1.46 5.559999 c
1.1 5.559999 0.92 5.746659 0.92 6.119999 c
0.92 6.12 l
h
28.35 5.56 m
27.97666 5.56 27.790001 5.74666 27.790001 6.12 c
27.790001 17 l
11.790001 5 l
11.790001 18.119999 l
11.790001 18.48 11.976661 18.66 12.350001 18.66 c
12.723342 18.66 12.910002 18.48 12.910002 18.119999 c
12.910002 7.219999 l
28.910002 19.219999 l
28.910002 6.119999 l
28.910002 5.746659 28.723341 5.559999 28.350002 5.559999 c
28.35 5.56 l
h
38.66 14 m
38.66 15.3733 39.48666 16.530001 41.139999 17.469999 c
42.793339 18.409998 44.82 18.879999 47.220001 18.879999 c
49.606602 18.879999 51.553402 18.619999 53.060001 18.099998 c
54.873302 17.473339 55.780003 16.553299 55.780003 15.339998 c
55.780003 14.073299 55.006664 13.159998 53.460003 12.599999 c
52.580002 12.279999 50.866604 11.946658 48.320004 11.599999 c
46.340004 11.319999 l
43.926605 10.973339 42.326603 10.666678 41.540005 10.400019 c
40.366703 10.000019 39.780006 9.420019 39.780006 8.660019 c
39.780006 7.940019 40.473347 7.353319 41.860008 6.900019 c
43.24667 6.446718 45.033409 6.220019 47.220009 6.220019 c
49.23341 6.220019 50.976608 6.593359 52.450008 7.340019 c
53.923409 8.086679 54.660007 8.973319 54.660007 10.000019 c
54.660007 10.373359 54.846668 10.56002 55.220009 10.56002 c
55.593349 10.56002 55.78001 10.37336 55.78001 10.000019 c
55.78001 8.62672 54.95335 7.470019 53.300011 6.530019 c
51.646671 5.590018 49.62001 5.120019 47.220009 5.120019 c
44.833408 5.120019 42.886608 5.380019 41.380009 5.900019 c
39.566708 6.526679 38.660007 7.446719 38.660007 8.660019 c
38.660007 9.926719 39.466667 10.846619 41.080009 11.420019 c
41.853348 11.686679 43.560009 12.02002 46.200008 12.420019 c
47.140007 12.56002 l
48.160007 12.70002 l
50.600006 13.03336 52.220009 13.34002 53.020008 13.62002 c
54.113308 13.99336 54.660007 14.5667 54.660007 15.34002 c
54.660007 16.06002 53.966667 16.646721 52.580009 17.100019 c
51.193352 17.553318 49.406609 17.78002 47.220009 17.78002 c
45.206608 17.78002 43.463409 17.406679 41.990009 16.660019 c
40.516609 15.913359 39.78001 15.026719 39.78001 14.000019 c
39.78001 13.626679 39.593349 13.440019 39.220009 13.440019 c
38.846668 13.440019 38.660007 13.626678 38.660007 14.000019 c
38.66 14 l
h
78.150002 5.44 m
65.590004 5.44 l
65.590004 18 l
65.590004 18.373341 65.776665 18.559999 66.150002 18.559999 c
66.523338 18.559999 66.709999 18.373339 66.709999 18 c
66.709999 14.56 l
78.150002 14.56 l
79.416702 14.56 80.493401 14.113339 81.380005 13.219999 c
82.266609 12.326659 82.710007 11.2533 82.710007 9.999999 c
82.710007 8.733299 82.26667 7.656599 81.380005 6.769999 c
80.49334 5.883399 79.416702 5.439999 78.150002 5.439999 c
78.150002 5.44 l
h
78.150002 13.44 m
66.709999 13.44 l
66.709999 6.56 l
78.150002 6.56 l
79.096664 6.56 79.9067 6.896659 80.580002 7.57 c
81.253304 8.243339 81.590004 9.0533 81.590004 10 c
81.590004 10.9467 81.253342 11.756701 80.580002 12.43 c
79.906662 13.1033 79.096703 13.440001 78.150002 13.440001 c
78.150002 13.44 l
h
92.660004 6.12 m
92.660004 18.119999 l
92.660004 18.48 92.840004 18.66 93.200005 18.66 c
93.573341 18.66 93.760002 18.48 93.760002 18.119999 c
93.760002 6.119999 l
93.760002 5.746659 93.573341 5.559999 93.200005 5.559999 c
92.840004 5.559999 92.660004 5.746659 92.660004 6.119999 c
92.660004 6.12 l
h
120.610001 17.540001 m
116.129997 14.560001 l
116.290001 14.560001 l
117.556702 14.560001 118.6334 14.113341 119.520004 13.220001 c
120.406609 12.326661 120.850006 11.253302 120.850006 10.000001 c
120.850006 8.733301 120.40667 7.656601 119.520004 6.770001 c
118.633339 5.883401 117.556702 5.440001 116.290001 5.440001 c
103.730003 5.440001 l
103.730003 18.000002 l
103.730003 18.373343 103.916664 18.560001 104.290001 18.560001 c
104.663338 18.560001 104.849998 18.373341 104.849998 18.000002 c
104.849998 14.560001 l
114.129997 14.560001 l
119.989998 18.460001 l
120.083336 18.526661 120.183334 18.560001 120.290001 18.560001 c
120.489998 18.560001 120.643341 18.473341 120.75 18.300001 c
120.816658 18.206661 120.849998 18.106661 120.849998 18.000002 c
120.849998 17.800001 120.769997 17.646662 120.610001 17.540003 c
120.610001 17.540001 l
h
104.849998 6.56 m
116.290001 6.56 l
117.236664 6.56 118.0467 6.89666 118.720001 7.57 c
119.393303 8.243339 119.730003 9.0533 119.730003 10 c
119.730003 10.9467 119.393341 11.756701 118.720001 12.43 c
118.046661 13.1033 117.236702 13.440001 116.290001 13.440001 c
104.849998 13.440001 l
104.849998 6.56 l
104.849998 6.56 l
h
151.820007 17.639999 m
141.060013 5.139999 l
130.640015 17.639999 l
130.560013 17.733339 130.52002 17.84668 130.52002 17.980019 c
130.52002 18.366678 130.713364 18.560019 131.100021 18.560019 c
131.260025 18.560019 131.393356 18.493359 131.500015 18.360018 c
134.660019 14.560018 l
147.700012 14.560018 l
150.980011 18.360018 l
151.100006 18.493359 151.246674 18.560019 151.420013 18.560019 c
151.780014 18.560019 151.960007 18.380018 151.960007 18.020018 c
151.960007 17.873358 151.913345 17.746698 151.820007 17.640038 c
151.820007 17.639999 l
h
135.600006 13.44 m
141.080002 6.86 l
146.759995 13.44 l
135.599991 13.44 l
135.600006 13.44 l
h
W
[151.04 0 0 14.219999 0.920007 4.999998] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc8_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc8_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc8_0 } {
0.5 sub 2 mul 0 add xpdfFunc8_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
q
[35.540653 0 0 35.549419 3088.2939 1560.2439] cm
q
16.959999 8.14 m
16.14666 7.19334 15.086699 6.453301 13.779999 5.92 c
12.473299 5.3867 11.079999 5.12 9.599999 5.12 c
7.159998 5.12 5.079999 5.77334 3.359999 7.08 c
1.586699 8.4267 0.699999 10.0666 0.699999 12 c
0.699999 13.9334 1.586659 15.573401 3.359999 16.92 c
5.079999 18.2267 7.159999 18.880001 9.599999 18.880001 c
11.079998 18.880001 12.473398 18.61334 13.779999 18.080002 c
15.086599 17.546663 16.146599 16.806702 16.959999 15.860002 c
17.199999 15.566662 17.186659 15.306662 16.919998 15.080002 c
16.813337 14.986662 16.686678 14.940002 16.540018 14.940002 c
16.380018 14.940002 16.246677 15.000002 16.140019 15.120002 c
15.406678 15.946662 14.463319 16.596703 13.310019 17.070002 c
12.156718 17.543301 10.920018 17.780001 9.600019 17.780001 c
7.453419 17.780001 5.620018 17.213341 4.100018 16.08 c
2.580019 14.946659 1.820019 13.586599 1.820019 12 c
1.820019 10.413401 2.580019 9.0534 4.100018 7.92 c
5.620018 6.7866 7.453419 6.22 9.600019 6.22 c
10.920018 6.22 12.156618 6.45666 13.310019 6.93 c
14.463419 7.40334 15.406618 8.0533 16.140019 8.88 c
16.246679 9 16.380018 9.06 16.540018 9.06 c
16.686678 9.06 16.813337 9.01334 16.919998 8.92 c
17.186659 8.69334 17.199999 8.43334 16.959999 8.14 c
h
35.73 5.22 m
33.303398 5.22 31.2234 5.88 29.49 7.2 c
27.7167 8.5467 26.83 10.1866 26.83 12.12 c
26.83 14.0534 27.71666 15.693399 29.49 17.040001 c
31.209999 18.346701 33.290001 19 35.73 19 c
38.169998 19 40.243401 18.346661 41.950001 17.040001 c
43.723301 15.680001 44.610001 14.040001 44.610001 12.120001 c
44.610001 10.200001 43.723339 8.560001 41.950001 7.200001 c
40.216702 5.880001 38.143402 5.220001 35.73 5.220001 c
35.73 5.22 l
h
43.509998 12.12 m
43.509998 13.706699 42.75 15.0634 41.23 16.190001 c
39.709999 17.316601 37.876598 17.880001 35.73 17.880001 c
33.583401 17.880001 31.75 17.316662 30.23 16.190001 c
28.709999 15.063339 27.949999 13.7066 27.949999 12.120001 c
27.949999 10.520001 28.709999 9.156601 30.23 8.030001 c
31.75 6.9034 33.583401 6.340001 35.73 6.340001 c
37.876598 6.340001 39.709999 6.903341 41.23 8.030001 c
42.75 9.15666 43.509998 10.520001 43.509998 12.120001 c
43.509998 12.12 l
h
70.419998 5.56 m
70.046661 5.56 69.860001 5.74666 69.860001 6.12 c
69.860001 17 l
53.860001 5 l
53.860001 18.119999 l
53.860001 18.48 54.046661 18.66 54.420002 18.66 c
54.793343 18.66 54.980003 18.48 54.980003 18.119999 c
54.980003 7.219999 l
70.980003 19.219999 l
70.980003 6.119999 l
70.980003 5.746659 70.793343 5.559999 70.420006 5.559999 c
70.419998 5.56 l
h
96.849998 5.44 m
80.849998 5.44 l
80.476662 5.44 80.290001 5.62666 80.290001 6 c
80.290001 6.37334 80.476662 6.56 80.849998 6.56 c
88.290001 6.56 l
88.290001 18 l
88.290001 18.373341 88.476662 18.559999 88.849998 18.559999 c
89.223335 18.559999 89.409996 18.373339 89.409996 18 c
89.409996 6.56 l
96.849998 6.56 l
97.223335 6.56 97.409996 6.373341 97.409996 6.000001 c
97.409996 5.62666 97.223335 5.440001 96.849998 5.440001 c
96.849998 5.44 l
h
123.260002 12.56 m
123.633339 12.56 123.82 12.373341 123.82 12 c
123.82 11.626659 123.633339 11.44 123.260002 11.44 c
107.82 11.44 l
107.82 6.56 l
123.260002 6.56 l
123.633339 6.56 123.82 6.37334 123.82 6 c
123.82 5.626659 123.633339 5.44 123.260002 5.44 c
106.700005 5.44 l
106.700005 18.559999 l
123.260002 18.559999 l
123.633339 18.559999 123.82 18.373339 123.82 18 c
123.82 17.626661 123.633339 17.440001 123.260002 17.440001 c
107.82 17.440001 l
107.82 12.56 l
123.260002 12.56 l
h
149.949997 5.56 m
149.57666 5.56 149.389999 5.74666 149.389999 6.12 c
149.389999 17 l
133.389999 5 l
133.389999 18.119999 l
133.389999 18.48 133.57666 18.66 133.949997 18.66 c
134.323334 18.66 134.509995 18.48 134.509995 18.119999 c
134.509995 7.219999 l
150.509995 19.219999 l
150.509995 6.119999 l
150.509995 5.746659 150.323334 5.559999 149.949997 5.559999 c
149.949997 5.56 l
h
176.38 5.44 m
160.380005 5.44 l
160.006668 5.44 159.820007 5.62666 159.820007 6 c
159.820007 6.37334 160.006668 6.56 160.380005 6.56 c
167.82001 6.56 l
167.82001 18 l
167.82001 18.373341 168.00667 18.559999 168.38 18.559999 c
168.75334 18.559999 168.94 18.373339 168.94 18 c
168.94 6.56 l
176.38 6.56 l
176.75334 6.56 176.94 6.373341 176.94 6.000001 c
176.94 5.62666 176.75334 5.440001 176.38 5.440001 c
176.38 5.44 l
h
W
[176.240004 0 0 14.22 0.700005 5.000001] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.423 mul 0.561 add
1 index 1 exp 0.588 mul 0.369 add
2 index 1 exp 0.486 mul 0.145 add
4 3 roll pop 
}
/xpdfFunc9_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.423 mul 0.984 add
1 index 1 exp -0.588 mul 0.957 add
2 index 1 exp -0.486 mul 0.631 add
4 3 roll pop 
}
/xpdfFunc9_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc9_0 } {
0.5 sub 2 mul 0 add xpdfFunc9_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
